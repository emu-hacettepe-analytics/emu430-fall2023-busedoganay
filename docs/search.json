[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the [group name] project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://[your-project-url].\nSummary\n[provide a biref summary of your project]\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Buse Doğanay.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\nThis is our template.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'tibble' was built under R version 4.3.2\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'purrr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'forcats' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(ggplot2)\nimdb_2010_2023 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nimdb_2010 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nr_imdb &lt;- read_html(imdb_2010_2023)\nr_imdb_before &lt;- read_html(imdb_2010)\ntitle_names &lt;- r_imdb |&gt; html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\nduration &lt;- r_imdb|&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\nduration &lt;- html_text(duration)\nduration &lt;- sapply(str_extract_all(duration, \"\\\\d+\"), function(x) {\n  x1 &lt;- as.numeric(x)\n  if(length(x1)&gt;1) x1[1]*60 + x1[2] else x1 })\n\n\nyear &lt;- r_imdb |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear &lt;- html_text(year)\nyear &lt;- as.numeric(year)\n\n\nvote &lt;- r_imdb|&gt; html_nodes('.kRnqtn')\nvote &lt;- html_text(vote)\nvote &lt;- parse_number(vote)\n\n\nrating &lt;- r_imdb|&gt; html_nodes('.ratingGroup--imdb-rating')\nrating &lt;- html_text(rating)\nrating &lt;- as.numeric(substr(rating,1,3))\n\n\n\n\ntitle &lt;- r_imdb_before |&gt; html_nodes('.ipc-title__text')\ntitle &lt;- html_text(title)\ntitle &lt;- tail(head(title,-1),-1)\ntitle &lt;- str_split(title, \" \", n=2)\ntitle &lt;- unlist(lapply(title, function(x) {x[2]}))\n\nyear_before &lt;- r_imdb_before |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear_before &lt;- html_text(year_before)\nyear_before &lt;- as.numeric(year_before)\n\nduration_before &lt;- r_imdb_before |&gt; html_nodes('.dli-title-metadata-item:nth-child(2)')\nduration_before &lt;- html_text(duration_before)\nduration_before &lt;- sapply(str_extract_all(duration_before, \"\\\\d+\"), function(x) {\n  x1 &lt;- as.numeric(x)\n  if(length(x1)&gt;1) x1[1]*60 + x1[2] else x1 })\n\n\nrating_before &lt;- r_imdb_before |&gt; html_nodes('.ratingGroup--imdb-rating')\nrating_before &lt;- html_text(rating_before)\nrating_before &lt;- as.numeric(substr(rating_before,1,3))\n\n\nvote_before &lt;- r_imdb_before |&gt; html_nodes('.kRnqtn')\nvote_before &lt;- html_text(vote_before)\nvote_before &lt;- parse_number(vote_before)\n\nframe_imdb &lt;- data.frame(\n  Title = title_names,\n  Year = year,\n  Duration = duration,\n  Rating = rating,\n  Votes = vote\n)\nframe_imdb_before &lt;- data.frame(\n  Title=title,\n  Year=year_before,\n  Duration=duration_before,\n  Rating = rating_before,\n  Votes=vote_before\n)\nturkish_movies &lt;- bind_rows(frame_imdb,frame_imdb_before)\n\nordering &lt;- turkish_movies %&gt;% arrange(desc(Rating))\n\nworst &lt;- head(ordering, 5)\nbest &lt;- tail(ordering, 5)\nwb &lt;- rbind(worst, best)\n\n\n\n#Fav movie\nfav_movie &lt;- \"Yeralti\" \nmovie &lt;- turkish_movies[turkish_movies$Title == fav_movie, !(names(turkish_movies) %in% \"Rank\")]\nprint(movie)\n\n     Title Year Duration Rating Votes\n37 Yeralti 2012      107    7.1 10083\n\n#rat. avg.\nturkish_movies$Year &lt;- as.integer(turkish_movies$Year)\nrating_average &lt;- turkish_movies %&gt;% group_by(Year) %&gt;%summarise(avg= mean(Rating))\nrating_average\n\n# A tibble: 54 × 2\n    Year   avg\n   &lt;int&gt; &lt;dbl&gt;\n 1  1963  7.8 \n 2  1965  8   \n 3  1968  7.9 \n 4  1970  8   \n 5  1972  7.1 \n 6  1973  7.9 \n 7  1974  7.7 \n 8  1975  7.86\n 9  1976  8.23\n10  1977  8.11\n# ℹ 44 more rows\n\n#plots\nggplot(rating_average,aes(x= Year, y= avg,)) + geom_point(color=\"blue\") + labs( x = \"Year\",\n     y = \"Average Rating\")\n\n\n\nmc &lt;- turkish_movies %&gt;% group_by(Year) %&gt;% summarise(Count = n())\n\nggplot(data= mc, aes(x = Year, y = Count)) + geom_line(color=\"red\") + labs( x = \"Year\",\n       y = \"Number of Movies\")\n\n\n\nggplot(data = turkish_movies, aes(x = factor(Year), y = Rating)) + geom_boxplot() +\n  labs(x = \"Year\",\n       y = \"Rating\")\n\n\n\n#cor\ncorrelation &lt;- cor(turkish_movies$Votes, turkish_movies$Rating)\ncat(\"Correlation between Votes and Rating:\", correlation, \"\\n\")\n\nCorrelation between Votes and Rating: 0.1307831 \n\nggplot(data = turkish_movies, aes(x = Votes, y = Rating)) +\n  geom_point() +\n  labs(x = \"Votes\", y = \"Rating\") +\n  ggtitle(\"Scatterplot of Votes vs Rating\")\n\n\n\ncorrelation &lt;- cor(turkish_movies$Duration, turkish_movies$Rating)\ncat(\"Correlation between Duration and Rating:\", correlation, \"\\n\")\n\nCorrelation between Duration and Rating: -0.01255374 \n\nggplot(data = turkish_movies, aes(x = Duration, y = Rating)) +\n  geom_point() +\n  labs(x = \"Duration\", y = \"Rating\") +\n  ggtitle(\"Scatterplot of Duration vs Rating\")\n\n\n\n#top1000\nbest_11&lt;- \"https://m.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250\"\ntr_best_11 &lt;- read_html(best_11)\ntitle_name &lt;- tr_best_11 |&gt; html_nodes('.ipc-title__text')\ntitle_name &lt;- html_text(title_name)\ntitle_name &lt;- tail(head(title_name,-1),-1)\ntitle_name &lt;- str_split(title_name, \" \", n=2)\ntitle_name &lt;- unlist(lapply(title_name, function(x) {x[2]}))\n\nyear &lt;- tr_best_11 |&gt; html_nodes('.dli-title-metadata-item:nth-child(1)')\nyear &lt;- html_text(year)\nyear &lt;- as.numeric(year)\n\ntr_df &lt;- data.frame(\n  Title = title_name,\n  Year = year\n)\nex_new &lt;- inner_join(tr_df, turkish_movies, by = c(\"Title\" = \"Title\", \"Year\" = \"Year\"))\nsorted &lt;- ex_new %&gt;% arrange(desc(Rating))\n\nI watched Hababam Sinifi and CM101MMXI. I think they both are good movies but I don’t like Turkish comedy movies very much so I’m not interested in CM101MMXI. I haven’t watched any of the bottom 5 Turkish movies so I can’t comment so much about these movies.\nThey are not same movies. Maybe IMDB list it differently, it may take different situations into consideration.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2020 - ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nFirm xxx, position xx, year xxx\nFirm yyy, position yyy, year yyy"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nFirm KORTEKS, position Production Planning Intern, year 2023\nFirm bbb, position yyy, year yyy"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nMy first assignment has two parts.\n\n\nI choose RStudio Global 2022 Conference Talks and watched Developing Internal Tools for Multi-Lingual Teams. He gives examples about this subject using R and Python in Bumble application.\n\n\n\n\n\n\nIdea #1 Building identical generic functions\nprint()\nsummary()\nbroom::tidy()\nin R\nsay_hello &lt;- function(x) {\nUseMethod(“say_hello”)\n}\nsay_hello.data.frame &lt;- function(x) {\nprint(“Hello dataframe!”)\n}\nsay_hello.default &lt;- function(x) {\nprint(“Hello there!”)\n}\nin Python\ndef say_hello(x)\nreturn”Hello there!”\nIdea #2 Identical error handling with classes\nin Python\ntry:\n#some code goes here\nexcept FileNotFoundError:\n#code to handle FileNotFoundError\nin R\nstop(“This throws an error!”)\n#&gt; Error: This throws an error\nrlang::abort(“This throws an error!”)\n#&gt; Error:\n#&gt;! This throws an error!\nIdea #3 Creating your own internal wrappers\nCalling Python from R"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Fall 2023] EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 25, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#a-summary",
    "href": "assignments/assignment-1.html#a-summary",
    "title": "Assignment 1",
    "section": "",
    "text": "I choose RStudio Global 2022 Conference Talks and watched Developing Internal Tools for Multi-Lingual Teams. He gives examples about this subject using R and Python in Bumble application."
  },
  {
    "objectID": "assignments/assignment-1.html#b-what-strategies-can-we-use-to-make-developing-tool-simultaneously-with-python-and-r-easier",
    "href": "assignments/assignment-1.html#b-what-strategies-can-we-use-to-make-developing-tool-simultaneously-with-python-and-r-easier",
    "title": "Assignment 1",
    "section": "",
    "text": "Idea #1 Building identical generic functions\nprint()\nsummary()\nbroom::tidy()\nin R\nsay_hello &lt;- function(x) {\nUseMethod(“say_hello”)\n}\nsay_hello.data.frame &lt;- function(x) {\nprint(“Hello dataframe!”)\n}\nsay_hello.default &lt;- function(x) {\nprint(“Hello there!”)\n}\nin Python\ndef say_hello(x)\nreturn”Hello there!”\nIdea #2 Identical error handling with classes\nin Python\ntry:\n#some code goes here\nexcept FileNotFoundError:\n#code to handle FileNotFoundError\nin R\nstop(“This throws an error!”)\n#&gt; Error: This throws an error\nrlang::abort(“This throws an error!”)\n#&gt; Error:\n#&gt;! This throws an error!\nIdea #3 Creating your own internal wrappers\nCalling Python from R"
  }
]